import java.applet.Applet;
import java.awt.Graphics;
import java.awt.*;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

public class PongCPT extends Applet implements KeyListener
{
    //fonts and variables used in the program
    int mode = 0, playerY = 300, playerSpeed = 10, botScore = 0, playerScore = 0, x = 300, y = 250, xSpeed = 2, ySpeed = 2, botY = 300, botSpeed = 3, practiceScore = 0;
    Font main = new Font ("Times New Roman",Font.BOLD, 40);
    Font rules = new Font ("Times New Roman",Font.BOLD, 20);
    public void init()
    {
	addKeyListener(this);
	requestFocus();
    }
   
    public void delay (int time)//delay
    {
	try
	{
	    Thread.sleep (time);
	}
	catch (InterruptedException ex)
	{
	}
    }
   
    public void menuScreen(Graphics g){
	Font options = new Font ("Times New Roman",Font.BOLD, 30);
       
	//reset scores
	botScore = 0;
	playerScore = 0;
	practiceScore = 0;
       
	//black background
	g.fillRect(0,0,700, 600);
       
	//print the title
	g.setFont(main);
	g.setColor(Color.white);
	g.drawString("Welcome to Pong!", 200, 100);
       
	//print the options that the player has
	g.setFont(options);
	g.setColor(Color.yellow);
	g.drawString("1. Practice", 70, 200);
	g.setColor(Color.orange);
	g.drawString("2. 1v1", 330, 200);
	g.setColor(Color.red);
	g.drawString("3. Exit", 550, 200);
       
	//print out the game rules
	g.setFont(rules);
	g.setColor(Color.yellow);
	g.drawString("Practice: Just you, the ball, and a wall.", 50, 300);
	g.drawString("Get a point when the ball hits the wall. Ends after 10 points.", 130, 330);
	g.setColor(Color.orange);
	g.drawString("1v1: Go up against a substandard bot.", 50, 380);
	g.drawString("A point is awarded everytime the ball hits the opposite wall.", 100, 410);
	g.drawString("First to reach 5 points wins.", 100, 440);
	g.setColor(Color.red);
	g.drawString("Exit: Exit the game.", 50, 480);
	g.setColor(Color.green);
	g.drawString("Use your arrow keys to move!", 220, 150);
       
	//print the prompt message
	g.setFont(options);
	g.setColor(Color.white);
	g.drawString("Enter a number (1,2,3) to continue:", 50, 550);
       
    }
    public void playerVsBot(Graphics g){
	g.setColor(Color.black);
	g.fillRect(0,0,700, 600);
       
	String[] scores = {"0", "1", "2", "3", "4", "5"};
	Color[] clr = {Color.red, Color.blue, Color.green, Color.pink, Color.yellow};
	g.setFont(main);
       
	//print the scores and halfway line
	g.setColor (Color.white);
	g.drawString(scores[botScore], 60, 40);
	g.drawString(scores[playerScore], 640, 40);
	//middle line
	g.fillRect (345, 20, 5, 50);
	g.fillRect (345, 120, 5, 50);
	g.fillRect (345, 220, 5, 50);
	g.fillRect (345, 320, 5, 50);
	g.fillRect (345, 420, 5, 50);
	g.fillRect (345, 520, 5, 50);
	g.fillRect (345, 620, 5, 50);
	g.fillRect (345, 720, 5, 50);
       
	//moving parts of the game
	g.fillOval (x, y, 25, 25);//ball
	g.fillRect (10, botY, 20, 200);//bot
	g.fillRect (670, playerY, 20, 70);//player
	delay (10);
	g.setColor (Color.black);
	g.fillOval (x, y, 25, 25);//ball
	g.fillRect (10, botY, 20, 200);//bot
	g.fillRect (670, playerY, 20, 70);//player
       
	//move the ball and bot
	x += xSpeed;
	y += ySpeed;
	botY += botSpeed;
       
	   
	if (x > getSize ().width - 45 && y > playerY && y < (playerY + 70) || x < 30 && y > botY && y < (botY + 200))//check if the ball hits the paddles
	{
	    xSpeed = -xSpeed;
	}
	else if(x > getSize ().width - 25){//reset the ball when it touches the right side add give bot a point
	    x = 325;
	    y = 250;
	    botScore++;
	    g.fillRect (30, 10, 60, 60);
	}
	else if(x < 5){//reset the ball when it touches the left side and give the player a point
	    x = 325;
	    y = 250;
	    playerScore++;
	    g.fillRect (670, 10, 60, 60);
	    xSpeed = -xSpeed;
	}
	if (y > getSize ().height - 25 || y < 0)//make the ball bounce up and down
	{
	    ySpeed = - ySpeed;
	}
	   
	if (botY > getSize().height - 200 || botY < 5)//make the bot move up and down
	{
	    botSpeed = - botSpeed;
	}
       
	if(botScore == 5){//lose screen
	    lose(g);
	}
	else if(playerScore == 5){//win screen
	    win(g);
	}
	else{
	    repaint();
	}
       
    }
   
    public void practice(Graphics g){
	g.setColor(Color.black);
	g.fillRect(0,0,700, 600);
       
	String[] score = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
	g.setFont(main);
       
	g.setColor(Color.white);
	g.drawString(score[practiceScore], 640, 40);
	g.fillRect (5,5,20,590);//wall
	//halfway lines
	g.fillRect (345, 20, 5, 50);
	g.fillRect (345, 120, 5, 50);
	g.fillRect (345, 220, 5, 50);
	g.fillRect (345, 320, 5, 50);
	g.fillRect (345, 420, 5, 50);
	g.fillRect (345, 520, 5, 50);
	g.fillRect (345, 620, 5, 50);
	g.fillRect (345, 720, 5, 50);
       
	//moving parts of the game
	g.setColor (Color.white);
	g.fillOval (x, y, 25, 25);//ball
	g.fillRect (670, playerY, 20, 70);//player
	delay (10);
	g.setColor (Color.black);
	g.fillOval (x, y, 25, 25);//ball
	g.fillRect (670, playerY, 20, 70);//player
	   
	   
	x += xSpeed;
	y += ySpeed;
	   
	if (x > getSize ().width - 45 && y > playerY && y < (playerY + 70) || x < 30)//make the ball bounce back after hitting the wall or player
	{
	    xSpeed = -xSpeed;
	}
	else if(x > getSize ().width - 25){//reset the ball to the middle
	    x = 300;
	    y = 250;
	}
       
	if(x < 30){//give the player a point for hitting the wall
	    practiceScore++;
	    g.fillRect (670, 10, 60, 60);
	}
       
	if (y > getSize ().height - 25 || y < 0)
	{
	    ySpeed = -ySpeed;
	}
	   
	if (practiceScore == 10){//go back to main menu when practice is done
	    mode = 0;
	    menuScreen(g);
	}
	else {
	    repaint();
	}
    }
   
    public void exit(Graphics g){//end screen
	g.setColor(Color.black);
	g.setFont(main);
	g.fillRect(0,0,700, 600);
	Color clr;
	Color[] colours = {Color.red, Color.blue, Color.green, Color.pink, Color.yellow};
	int i = 0;
	while(true)
	{
	    g.setColor (colours[i]);
	    i++;
	    g.drawString("Thank you for playing pong!", 120, 300);
	    if (i>4){
		i = 0;
	    }
	    delay(500);
	}
    }
   
    public void lose(Graphics g){//lose screen
	g.setColor(Color.black);
	g.setFont(main);
	g.fillRect(0,0,700, 600);
       
	g.setColor (Color.red);
	g.drawString("You lose", 270, 300);
       
	g.setColor (Color.white);
	g.setFont(rules);
	g.drawString("Press the spacebar to continue", 10, 580);
	   
    }
   
    public void win (Graphics g){//win screen
	g.setColor(Color.black);
	g.setFont(main);
	g.fillRect(0,0,700, 600);
       
	g.setColor (Color.green);
	g.drawString("You Win", 275, 300);
       
	g.setColor (Color.white);
	g.setFont(rules);
	g.drawString("Press the spacebar to continue", 10, 580);
    }
   
    public void paint(Graphics g)//paint method
    {
	if (mode == 0){
	   menuScreen(g);
	}
	else if (mode == 1){
	    practice(g);
	}
	else if (mode == 2){
	    playerVsBot(g);
	}
	else if (mode == 3){  
	    exit(g);
	}
       
    }
   
    public void keyPressed(KeyEvent e){
	if (e.getKeyCode () == KeyEvent.VK_1)
	{
	    mode = 1;
	}
	else if (e.getKeyCode () == KeyEvent.VK_2)
	{
	    mode = 2;
	}
	else if (e.getKeyCode () == KeyEvent.VK_3)
	{
	    mode = 3;
	}
	else if(e.getKeyCode () == KeyEvent.VK_UP)
	{
	    playerY = playerY - playerSpeed;
	   
	}
	else if(e.getKeyCode () == KeyEvent.VK_DOWN)
	{
	    playerY = playerY + playerSpeed;
	}
	else if(e.getKeyCode () == KeyEvent.VK_SPACE)
	{
	    mode = 0;
	}
	repaint();
    }
    public void keyReleased(KeyEvent e){
       
    }
    public void keyTyped(KeyEvent e){
       
    }
   
   
   
}
